[{"title":"Introduction","type":0,"sectionRef":"#","url":"/SmartRaycast/docs/intro","content":"","keywords":""},{"title":"What does this resource do?​","type":1,"pageTitle":"Introduction","url":"/SmartRaycast/docs/intro#what-does-this-resource-do","content":"This resource can help you manage your RaycastParams via a simple API. This resource uses the best practices to help you create ambitious projects with little overhead! This resource gives you a ready solution to apply to your projects without you having to worry about the details of Raycast performance when it comes to managing your RaycastParams. "},{"title":"Installation","type":0,"sectionRef":"#","url":"/SmartRaycast/docs/Install","content":"","keywords":""},{"title":"How to install​","type":1,"pageTitle":"Installation","url":"/SmartRaycast/docs/Install#how-to-install","content":""},{"title":"Wally​","type":1,"pageTitle":"Installation","url":"/SmartRaycast/docs/Install#wally","content":"To set up using Wally, use the following to get the latest version: smartraycast = &quot;yiannis123git/smartraycast@*&quot;  "},{"title":"Manual​","type":1,"pageTitle":"Installation","url":"/SmartRaycast/docs/Install#manual","content":"Download SmartRaycast.rbxm from the latest release and drag and drop the file into Roblox Studio "},{"title":"Channel","type":0,"sectionRef":"#","url":"/SmartRaycast/api/Channel","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Channel","url":"/SmartRaycast/api/Channel#properties","content":" "},{"title":"_Name​","type":1,"pageTitle":"Channel","url":"/SmartRaycast/api/Channel#_Name","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Channel._Name: string Name used to identify channels internaly.  "},{"title":"RayParams​","type":1,"pageTitle":"Channel","url":"/SmartRaycast/api/Channel#RayParams","content":"&lt;/&gt; Channel.RayParams: RaycastParams RaycastParams tied to the Channel. All properties of the RaycastParams can be changed in runtime excluding FilterDescendantsInstances  "},{"title":"_Janitor​","type":1,"pageTitle":"Channel","url":"/SmartRaycast/api/Channel#_Janitor","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Channel._Janitor: Janitor Janitor Object used for cleanup.  "},{"title":"_ChannelTag​","type":1,"pageTitle":"Channel","url":"/SmartRaycast/api/Channel#_ChannelTag","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Channel._ChannelTag: string? Collection Service Tag used to tag instances associated with the Channel.  "},{"title":"_MaintenanceCopy​","type":1,"pageTitle":"Channel","url":"/SmartRaycast/api/Channel#_MaintenanceCopy","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Channel._MaintenanceCopy: {Instance? } A copy of FilterDescendantsInstances used to maintain the actual FilterDescendantsInstances.  "},{"title":"_FilterCounter​","type":1,"pageTitle":"Channel","url":"/SmartRaycast/api/Channel#_FilterCounter","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Channel._FilterCounter: number Keeps track of the number of instances in FilterDescendantsInstances. "},{"title":"Functions​","type":1,"pageTitle":"Channel","url":"/SmartRaycast/api/Channel#functions","content":" "},{"title":"Destroy​","type":1,"pageTitle":"Channel","url":"/SmartRaycast/api/Channel#Destroy","content":"&lt;/&gt; Channel:Destroy() → () Destroys a channel by cleaning up references and disconnecting events. After :Destroy is called, the corresponding FilterDescendantsInstances will no longer be actively maintained and the channel's methods should no longer be used.  "},{"title":"AppendToFDI​","type":1,"pageTitle":"Channel","url":"/SmartRaycast/api/Channel#AppendToFDI","content":"&lt;/&gt; Channel:AppendToFDI( Inst: Instance -- The Instance to be added to FilterDescendantsInstances ) → () Adds an instance to FilterDescendantsInstances.  "},{"title":"RemoveFromFDI​","type":1,"pageTitle":"Channel","url":"/SmartRaycast/api/Channel#RemoveFromFDI","content":"&lt;/&gt; Channel:RemoveFromFDI( Inst: Instance -- The Instance to be removed from FilterDescendantsInstances ) → () Removes an Instance from FilterDescendantsInstances. warning Do not use _RemoveFromFDI instead of RemoveFromFDI. RemoveFromFDI should be used to manualy remove instances, _RemoveFromFDI should never be used and is only used internally. "},{"title":"SmartRaycast","type":0,"sectionRef":"#","url":"/SmartRaycast/api/SmartRaycast","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"SmartRaycast","url":"/SmartRaycast/api/SmartRaycast#properties","content":" "},{"title":"SanityCheck​","type":1,"pageTitle":"SmartRaycast","url":"/SmartRaycast/api/SmartRaycast#SanityCheck","content":"&lt;/&gt; SmartRaycast.SanityCheck: boolean Setting this property to false will disable sanity checking.  "},{"title":"Warnings​","type":1,"pageTitle":"SmartRaycast","url":"/SmartRaycast/api/SmartRaycast#Warnings","content":"&lt;/&gt; SmartRaycast.Warnings: boolean Setting this property to false will disable warnings. "},{"title":"Functions​","type":1,"pageTitle":"SmartRaycast","url":"/SmartRaycast/api/SmartRaycast#functions","content":" "},{"title":"DestroyChannel​","type":1,"pageTitle":"SmartRaycast","url":"/SmartRaycast/api/SmartRaycast#DestroyChannel","content":"&lt;/&gt; SmartRaycast.DestroyChannel(WhatToDestroy: string | Channel) → () You can use this to destroy channels instead of calling :Destroy() on a channel.  "},{"title":"GetChannelObject​","type":1,"pageTitle":"SmartRaycast","url":"/SmartRaycast/api/SmartRaycast#GetChannelObject","content":"&lt;/&gt; SmartRaycast.GetChannelObject(ChannelName: string) → Channel? You can use this function to get a Channel Object by providing the name of the Channel, if the Channel does not exist then nil will be returned  "},{"title":"Cast​","type":1,"pageTitle":"SmartRaycast","url":"/SmartRaycast/api/SmartRaycast#Cast","content":"&lt;/&gt; SmartRaycast.Cast( Origin: Vector3 , Direction: Vector3 , ChannelName: string ) → () Cast a ray similiar to workspace:Raycast(). If you want identical usage as the normal roblox method you can do the following: local SmartRaycast = PathToModule local Channel = SmartRaycast.CreateChannel(&quot;ExampleChannel&quot;) local MyResult = workspace:Raycast(Origin,Direction,Channel.RayParams)   "},{"title":"CreateChannel​","type":1,"pageTitle":"SmartRaycast","url":"/SmartRaycast/api/SmartRaycast#CreateChannel","content":"&lt;/&gt; SmartRaycast.CreateChannel( ChannelName: string,-- Name of the channel that will be created. BaseArray: {Instance | string}?,-- Instances/Collection Service tags that will always remain present in the FilterDescendantsInstances Array. InstancesToCheck: {Instance | string}?,-- Instances/Collection Service tags, that will be checked in runtime using the 'InstanceLogic' function. InstanceLogic: ((Instance ) → boolean | nil)?,-- A function that should recieve an instance and return true if the instance should be added in the channel's filter. FilterType: Enum.RaycastFilterType?, IgnoreWater: boolean?, CollisionGroup: string?, RespectCanCollide: boolean?, BruteForceAllSlow: boolean? ) → Channel  info For more information, please refer to the 'How to Use' section in the Docs, specifically the 'Creating a Channel' part. Creates a new channel. "},{"title":"How to use","type":0,"sectionRef":"#","url":"/SmartRaycast/docs/HowToUse","content":"","keywords":""},{"title":"Creating a channel​","type":1,"pageTitle":"How to use","url":"/SmartRaycast/docs/HowToUse#creating-a-channel","content":"Creating a channel is very simple and works similarly to creating a normal RaycastParams instance, the difference being a couple of extra arguments that define how the module should manage the RaycastParams filter. "},{"title":"Arguments​","type":1,"pageTitle":"How to use","url":"/SmartRaycast/docs/HowToUse#arguments","content":"ChannelName​ The name of our channel should be unique and will be used to access the channel after creating it. BaseArray​ Instances represented in this array will always be included in our filter. You should add instances that you know should always be part of the channel's filter. You can pass instances directly into the array or a string that represents a collection service tag. Passing a string that represents a collection service tag will add all current and future tagged instances to the channel's filter. InstancesToCheck​ This argument complements the &quot;InstanceLogic&quot; argument, detailed below. Similar to the BaseArray, you have the option to directly pass instances into the array or use a string that represents a collection service tag. When an instance is added to the array, both the instance and its descendants are continuously assessed by the InstanceLogic function to decide if they should be included in the channel's filter or removed. If a string representing a collection service tag is used, then only that specific instance is continuously evaluated by the InstanceLogic function to determine its eligibility for the channel's filter. caution It's not recommended to directly pass instances with a high number of descendants into the InstancesToCheck array. Ideally, you should pass a collection service tag that has only the instances of interest tagged. InstanceLogic​ This argument complements the &quot;InstancesToCheck&quot; argument, detailed above. This should be a lightweight function that takes a single instance as its sole argument and returns true if that instance should be added to the filter. The function will be executed in a protected call by the module, so there's no need to handle missing properties or similar issues with additional logic within the function. For an example of an InstanceLogic function, see the example bellow. ... &quot;The rest of the channel creation arguments are generic RaycastParams parameters that can be found in the corresponding Roblox documentation. "},{"title":"Example​","type":1,"pageTitle":"How to use","url":"/SmartRaycast/docs/HowToUse#example","content":"This is a simple, nonsensical example designed for easy understanding of the channel creation process. local SmartRaycastModule = PathToModule.SmartRaycast -- Our SmartRaycast module local OurChannelName = &quot;ExampleChannelName&quot; -- Our Channel's name -- We want to include characters in our channel's filter, so we specify game.Workspace.Characters. -- This is a folder that contains various characters. -- We also want to include instances tagged with the collection service tag 'CatsAndDogs'. -- These instances will always be present in our channel's filter. local BaseArray = {game.Workspace.Characters, &quot;CatsAndDogs&quot;} -- We don't know what this house model contains, so we want to constantly monitor it. -- We also want to keep track of several individual objects tagged with &quot;DynamicObjects&quot; collection service tag. local InstancesToCheck = {game.workspace.House,&quot;DynamicObjects&quot;} -- We now must define our instance logic function, as we are working with an InstancesToCheck array. -- For more information, refer to the argument explanation above. local function InstanceLogic(Inst: Instance): boolean if Inst.Size.X &gt; 100 then -- this will not error if the instance does not have a size property due to pcall return true -- Add this instance to the channel's filter end return false -- optional end local OurNewlyCreatedChannel = SmartRaycastModule.CreateChannel( ChannelName, BaseArray, InstancesToCheck, InstanceLogic, Enum.RaycastFilterType.Exclude, -- ... )  "},{"title":"Destroying a channel​","type":1,"pageTitle":"How to use","url":"/SmartRaycast/docs/HowToUse#destroying-a-channel","content":"After a channel is destroyed, it should no longer be used. You can destroy a channel in one of the following three ways. Channel:Destroy() -- or SmartRaycastModule.DestroyChannel(Channel) -- or SmartRaycastModule.DestroyChannel(&quot;ExampleChannelName&quot;)  Casting a ray This works almost identically to the normal workspace:Raycast but instead of RayParams we pass the Channel name. If you want identical usage as the normal roblox method you can just call workspace:Raycast and pass the Channel's RayParams property. local SmartRaycastModule = PathToModule.SmartRaycast -- Our SmartRaycast module SmartRaycastModule.Cast(Origin,Direction,&quot;ExampleChannelName&quot;) -- Or we can do workspace:Raycast(Origin,Direction,Channel.RayParams)  Accessing channels You can access a channel from anywhere by getting it through the :GetChannelObject(&quot;YourChannelsName&quot;) module function or by referencing its name during a module raycast call. local Channel = SmartRaycastModule.GetChannelObject(&quot;ExampleChannelName&quot;) if Channel ~= nil then workspace:Raycast(Origin,Direction,Channel.RayParams) end  "}]