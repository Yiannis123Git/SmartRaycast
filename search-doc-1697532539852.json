[{"title":"Introduction","type":0,"sectionRef":"#","url":"/SmartRaycast/docs/intro","content":"","keywords":""},{"title":"Why does this exist?​","type":1,"pageTitle":"Introduction","url":"/SmartRaycast/docs/intro#why-does-this-exist","content":"I feel like Raycasting is an integral part of a lot of Projects. It should be treated with care when it comes to performance. RayParams, or more specifically FilterDescendantsInstances, can cause overhead if your game's structure is not set up properly and you are mismanaging them. Imagine a game's world that has a large number of instances that need to be constantly removed and added due to streaming enabled or other reasons. That would cause quite a bit overhead if handled improperly. This resource gives you a ready solution to apply in your projects. "},{"title":"Installation","type":0,"sectionRef":"#","url":"/SmartRaycast/docs/Install","content":"","keywords":""},{"title":"How to install​","type":1,"pageTitle":"Installation","url":"/SmartRaycast/docs/Install#how-to-install","content":""},{"title":"Wally​","type":1,"pageTitle":"Installation","url":"/SmartRaycast/docs/Install#wally","content":"Setup using WallyTo get the latest version use the following: smartraycast = &quot;yiannis123git/smartraycast@*&quot;  "},{"title":"Manual​","type":1,"pageTitle":"Installation","url":"/SmartRaycast/docs/Install#manual","content":"Download SmartRaycast.rbxm from the latest release and drag and drop the file into Roblox Studio "},{"title":"How to use","type":0,"sectionRef":"#","url":"/SmartRaycast/docs/HowToUse","content":"","keywords":""},{"title":"Channel Creation​","type":1,"pageTitle":"How to use","url":"/SmartRaycast/docs/HowToUse#channel-creation","content":"This function takes 4 special arguments the rest of the arguments are your typical RayParams.new() arguments. "},{"title":"1 - ChannelName​","type":1,"pageTitle":"How to use","url":"/SmartRaycast/docs/HowToUse#1---channelname","content":"The name of the Channel that we will use to identify our channel after after creation. "},{"title":"2 - BaseArray​","type":1,"pageTitle":"How to use","url":"/SmartRaycast/docs/HowToUse#2---basearray","content":"An array of instances that will always be present in our FilterDescendantsInstances. You can add instances here that you know you will always Exclude/Include. "},{"title":"3 - InstancesToCheck​","type":1,"pageTitle":"How to use","url":"/SmartRaycast/docs/HowToUse#3---instancestocheck","content":"Instances that will have their Descendants checked in runtime using the 'InstanceLogic' function. "},{"title":"4 - InstanceLogic​","type":1,"pageTitle":"How to use","url":"/SmartRaycast/docs/HowToUse#4---instancelogic","content":"A function that should recieve an instance and return true if the instance should be added in the FilterDescendantsInstances Array. This function is run in protected call so you don't need to worry about any errors. "},{"title":"EXAMPLE​","type":1,"pageTitle":"How to use","url":"/SmartRaycast/docs/HowToUse#example","content":"local SmartRaycast = PathToModule --[ -- Lets imagine we have 2 folders in our worksapce with Parts in them called 'PartsToIgnore1' and 'PartsToIgnore2' -- Lets also imagine we have a folder in our workspace called `DynamicFolder` --] local Channel = SmartRaycast.CreateChannel( &quot;TestChannel&quot;, -- Name of the Channel that we will use to Identify our channel { game.Workspace.PartsToIgnore1, game.Workspace.PartsToIgnore2}, -- we add these objects to the BaseArray argument since they should always be ingnored { game.Workspace.DynamicFolder}, -- We wanna check every Descedant of this folder to see if they should be Ignored or not, so we put the folder inside our InstancesToCheck Array function(Inst: Instance) -- We specify our InstanceLogic function that will check the Descedants of the Dynamic Folder, if the function returns true the instance will be ignored if Inst.Name == &quot;SpecialName&quot; then return true end end, Enum.RaycastFilterType.Exclude )  "},{"title":"Casting a ray​","type":1,"pageTitle":"How to use","url":"/SmartRaycast/docs/HowToUse#casting-a-ray","content":"This works almost identically to the normal workspace:Raycast but instead of RayParams we pass the Channel name. If you want identical usage as the normal roblox method you can just call workspace:Raycast and pass the Channel's RayParams property. SmartRaycast.Cast(Origin,Direction,&quot;TestChannel&quot;) -- Or we can do workspace:Raycast(Origin,Direction,Channel.RayParams)  "},{"title":"SmartRaycast","type":0,"sectionRef":"#","url":"/SmartRaycast/api/SmartRaycast","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"SmartRaycast","url":"/SmartRaycast/api/SmartRaycast#properties","content":" "},{"title":"SanityCheck​","type":1,"pageTitle":"SmartRaycast","url":"/SmartRaycast/api/SmartRaycast#SanityCheck","content":"&lt;/&gt; SmartRaycast.SanityCheck: boolean Setting this property to false will disable sanity checking.  "},{"title":"Warnings​","type":1,"pageTitle":"SmartRaycast","url":"/SmartRaycast/api/SmartRaycast#Warnings","content":"&lt;/&gt; SmartRaycast.Warnings: boolean Setting this property to false will disable warnings. "},{"title":"Functions​","type":1,"pageTitle":"SmartRaycast","url":"/SmartRaycast/api/SmartRaycast#functions","content":" "},{"title":"DestroyChannel​","type":1,"pageTitle":"SmartRaycast","url":"/SmartRaycast/api/SmartRaycast#DestroyChannel","content":"&lt;/&gt; SmartRaycast.DestroyChannel(WhatToDestroy: string | Channel) → () You can use this to destroy channels instead of calling :Destroy() on a channel.  "},{"title":"GetChannelObject​","type":1,"pageTitle":"SmartRaycast","url":"/SmartRaycast/api/SmartRaycast#GetChannelObject","content":"&lt;/&gt; SmartRaycast.GetChannelObject(ChannelName: string) → Channel? You can use this function to get a Channel Object by providing the name of the Channel, if the Channel does not exist then nil will be returned  "},{"title":"Cast​","type":1,"pageTitle":"SmartRaycast","url":"/SmartRaycast/api/SmartRaycast#Cast","content":"&lt;/&gt; SmartRaycast.Cast( Origin: Vector3 , Direction: Vector3 , ChannelName: string ) → () Cast a ray similiar to workspace:Raycast(). If you want identical usage as the normal roblox method you can do the following: local SmartRaycast = PathToModule local Channel = SmartRaycast.CreateChannel(&quot;ExampleChannel&quot;) local MyResult = workspace:Raycast(Origin,Direction,Channel.RayParams)   "},{"title":"CreateChannel​","type":1,"pageTitle":"SmartRaycast","url":"/SmartRaycast/api/SmartRaycast#CreateChannel","content":"&lt;/&gt; SmartRaycast.CreateChannel( ChannelName: string,-- Name of the channel that will be created. BaseArray: {Instance }?,-- Instances that will always remain present in the FilterDescendantsInstances Array. InstancesToCheck: {Instance }?,-- Instances that will have their Descendants checked in runtime using the 'InstanceLogic' function. InstanceLogic: ((any) → boolean | nil)?,-- A function that should recieve an instance and return true if the instance should be added in the FilterDescendantsInstances Array. This function is run in protected call so you don't need to worry about any errors. FilterType: Enum.RaycastFilterType?, IgnoreWater: boolean?, CollisionGroup: string?, RespectCanCollide: boolean?, BruteForceAllSlow: boolean? ) → Channel  warning If you rely on constantly creating and destroying channels, you should set the .SanityCheck property of the module to false to avoid potential overhead. note InstanceLogic Example: local function InstanceLogic(Inst: Instance) if Inst.Size.X &gt; 100 then -- this will never error due pcall so it is safe return true end end Creates a new channel. "},{"title":"Channel","type":0,"sectionRef":"#","url":"/SmartRaycast/api/Channel","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Channel","url":"/SmartRaycast/api/Channel#properties","content":" "},{"title":"_Name​","type":1,"pageTitle":"Channel","url":"/SmartRaycast/api/Channel#_Name","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Channel._Name: string Name used to identify channels internaly.  "},{"title":"RayParams​","type":1,"pageTitle":"Channel","url":"/SmartRaycast/api/Channel#RayParams","content":"&lt;/&gt; Channel.RayParams: RaycastParams RaycastParams tied to the Channel. All properties of the RaycastParams can be changed in runtime excluding FilterDescendantsInstances  "},{"title":"_Janitor​","type":1,"pageTitle":"Channel","url":"/SmartRaycast/api/Channel#_Janitor","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Channel._Janitor: Janitor Janitor Object used for cleanup.  "},{"title":"_ChannelTag​","type":1,"pageTitle":"Channel","url":"/SmartRaycast/api/Channel#_ChannelTag","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Channel._ChannelTag: string? Collection Service Tag used to tag instances associated with the Channel.  "},{"title":"_MaintenanceCopy​","type":1,"pageTitle":"Channel","url":"/SmartRaycast/api/Channel#_MaintenanceCopy","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Channel._MaintenanceCopy: {Instance? } A copy of FilterDescendantsInstances used to maintain the actual FilterDescendantsInstances.  "},{"title":"_FilterCounter​","type":1,"pageTitle":"Channel","url":"/SmartRaycast/api/Channel#_FilterCounter","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Channel._FilterCounter: number Keeps track of the number of instances in FilterDescendantsInstances. "},{"title":"Functions​","type":1,"pageTitle":"Channel","url":"/SmartRaycast/api/Channel#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Channel","url":"/SmartRaycast/api/Channel#new","content":"&lt;/&gt; Channel.new( ChannelName: string,-- Name of the channel that will be created. BaseArray: {Instance }?,-- Instances that will always remain present in the FilterDescendantsInstances Array. InstancesToCheck: {Instance }?,-- Instances that will have their Descendants checked in runtime using the 'InstanceLogic' function. InstanceLogic: ((any) → boolean | nil)?,-- A function that should recieve an instance and return true if the instance should be added in the FilterDescendantsInstances Array. This function is run in protected call so you don't need to worry about any errors. FilterType: Enum.RaycastFilterType?, IgnoreWater: boolean?, CollisionGroup: string?, RespectCanCollide: boolean?, BruteForceAllSlow: boolean? ) → Channel  info This is the same function as the CreateChannel module function Creates a new Channel  "},{"title":"Destroy​","type":1,"pageTitle":"Channel","url":"/SmartRaycast/api/Channel#Destroy","content":"&lt;/&gt; Channel:Destroy() → () Destroys a channel by cleaning up references and disconnecting events. After :Destroy is called, the corresponding FilterDescendantsInstances will no longer be actively maintained and the channel's methods should no longer be used.  "},{"title":"AppendToFDI​","type":1,"pageTitle":"Channel","url":"/SmartRaycast/api/Channel#AppendToFDI","content":"&lt;/&gt; Channel:AppendToFDI( Inst: Instance -- The Instance to be added to FilterDescendantsInstances ) → () Adds an instance to FilterDescendantsInstances.  "},{"title":"RemoveFromFDI​","type":1,"pageTitle":"Channel","url":"/SmartRaycast/api/Channel#RemoveFromFDI","content":"&lt;/&gt; Channel:RemoveFromFDI( Inst: Instance -- The Instance to be removed from FilterDescendantsInstances ) → () Removes an Instance from FilterDescendantsInstances. warning Do not use _RemoveFromFDI instead of RemoveFromFDI. RemoveFromFDI should be used to manualy remove instances, _RemoveFromFDI should never be used and is only used internally. "}]