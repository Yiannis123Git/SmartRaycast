{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting started","text":"<p>SmartRaycast is a raycast management module for Roblox Studio. This resource employs best practices to assist you in creating ambitious projects with minimal overhead. It provides a ready-to-use solution for your projects, allowing you to focus on development. </p> <p>What does it do?</p> <ul> <li>Centralizes Raycast Parameters: All parameters are derived from the same module.</li> <li>Helps you avoid writing redundant boilerplate or duplicate code.</li> <li>Handles all of the work for you through a simple API.</li> </ul>"},{"location":"#installation","title":"Installation","text":""},{"location":"#wally","title":"Wally","text":"<p>To set up using Wally, use the following to get the latest version: <pre><code>smartraycast = \"yiannis123git/smartraycast@*\"\n</code></pre></p>"},{"location":"#manual","title":"Manual","text":"<p>Download <code>SmartRaycast.rbxm</code> from the latest release and drag and drop the file into Roblox Studio.</p>"},{"location":"Channel/","title":"Channel","text":"<p>This section refers to the channel object.</p>"},{"location":"Channel/#properties","title":"Properties","text":"<p>Warning</p> <p>Any property that starts with the character <code>_</code> is not meant to be changed</p>"},{"location":"Channel/#rayparams","title":"RayParams","text":"<p>Channel.RayParams: RaycastParams </p> <p>RaycastParams tied to the Channel. All properties of the RaycastParams can be changed in runtime excluding FilterDescendantsInstances</p>"},{"location":"Channel/#methods","title":"Methods","text":"<p>Warning</p> <p>Any method that starts with the character <code>_</code> is not meant to be called. </p>"},{"location":"Channel/#cast","title":"Cast","text":"<p>Channel:Cast(Origin: Vector3, Direction: Vector3, WorldRoot: WorldRoot?): RaycastResult?</p> <p>Casts a ray with the given origin and direction at the specified WorldRoot using the Channel's filter. If no WorldRoot is provided, then <code>Workspace</code> will be used instead.</p> <p>Info</p> <p>This method can be run in parallel.</p>"},{"location":"Channel/#destroy","title":"Destroy","text":"<p>Channel:Destroy() </p> <p>Destroys a channel by cleaning up references and disconnecting events. After <code>:Destroy</code> is called, the corresponding FilterDescendantsInstances will no longer be actively maintained and the channel should no longer be used.</p>"},{"location":"Channel/#addtofilter","title":"AddToFilter","text":"<p>Channel:AddToFilter(ToAdd: Instance | string )</p> <p>Adds an instance or collection service tag to the FilterDescendantsInstances.</p> <p>Info</p> <p>This method can be run in parallel when adding instances.</p>"},{"location":"Channel/#removefromfilter","title":"RemoveFromFilter","text":"<p>Channel:RemoveFromFilter(ToRemove: Instance | string )</p> <p>Removes an Instance or collection service tag from the FilterDescendantsInstances.</p> <p>Info</p> <p>This method can be run in parallel when removing instances.</p>"},{"location":"Channel/#forceupdatefilter","title":"ForceUpdateFilter","text":"<p>Channel:ForceUpdateFilter()</p> <p>Forcefully updates the Channel's filter instead of waiting for the next module update at the end of a frame.</p>"},{"location":"HowToUse/","title":"How to use SmartRaycast","text":""},{"location":"HowToUse/#what-is-a-channel","title":"What is a channel?","text":"<p>Imagine the channel object as your new RaycastParams. Each channel object corresponds to a RaycastParams instance. We can access these channels and use them to cast rays.</p>"},{"location":"HowToUse/#creating-a-channel","title":"Creating a channel","text":"<p>Creating a channel is very simple and works similarly to creating a normal RaycastParams instance, the difference being a couple of extra arguments that define how the module should manage the RaycastParams filter.</p>"},{"location":"HowToUse/#arguments","title":"Arguments","text":""},{"location":"HowToUse/#channelname","title":"ChannelName","text":"<p>The name of our channel. Channel names should be unique and can be used to access the channel after creating it.</p>"},{"location":"HowToUse/#base","title":"Base","text":"<p>Instances represented in this array will be included in the FilterDescendantsInstances. You should add instances that you know should be part of the channel's  FilterDescendantsInstances. You can pass instances directly into the array or a string that represents a collection service tag. Passing a string that represents a collection service tag will add all current and future tagged instances to the channel's filter. You can always remove an instance/tag from the filter by using the <code>RemoveFromFilter</code> channel method, including the ones referenced in the base array.</p>"},{"location":"HowToUse/#canbeadded","title":"CanBeAdded","text":"<p>This should be a lightweight function that accepts a single instance as its sole argument and returns <code>true</code> if that instance should be included in the filter. The function must be error-proof. For an example of an <code>CanBeAdded</code> function, see the example below. This function is utilized during raycast operations to determine which instances to exclude. It will be applied to instances not found in the channel's filter. If no function is provided, only the channel's filter will be used.</p> <p>Info</p> <p>Due to technical and performance reasons, the <code>CanBeAdded</code> functionality can only be used with an exclude RaycastParams.FilterType.</p>"},{"location":"HowToUse/#_1","title":"...","text":"<p>The rest of the channel creation arguments are generic RaycastParams parameters that can be found in the corresponding Roblox documentation.</p>"},{"location":"HowToUse/#example","title":"Example","text":"<pre><code>local SmartRaycastModule = PathToModule.smartraycast -- Our SmartRaycast module \n\nlocal OurChannelName = \"ExampleChannelName\" -- Our Channel's name\n\n-- We want to include characters in our channel's filter, so we specify game.Workspace.Characters.\n-- This is a folder that contains various characters.\n-- We also want to include instances tagged with the collection service tag 'CatsAndDogs'.\n-- These instances will be present in our channel's filter.\n\nlocal Base = {game.Workspace.Characters, \"CatsAndDogs\"} \n\nlocal function CanBeAdded(Inst: Instance): boolean\n    if Inst.Transparency and Inst.Transparency &gt; 0.8 then \n        return true -- Add this instance to the channel's filter\n    end\n\n    return false -- optional \nend\n\nlocal OurNewlyCreatedChannel = SmartRaycastModule.CreateChannel(\n    ChannelName,\n    Base,\n    CanBeAdded,\n    Enum.RaycastFilterType.Exclude, \n    -- ...\n)\n</code></pre>"},{"location":"HowToUse/#modifying-the-channels-filter","title":"Modifying the Channel's filter","text":"<p>It should be noted that updates to the channel's filter are not pushed immediately but are applied at the \"end\" of every frame. If you need the updates to be applied immediately, you can force the filter to update via the [<code>ForceUpdateFilter</code>] channel method.</p>"},{"location":"HowToUse/#adding-to-the-channels-filter","title":"Adding to the Channel's filter","text":"<p>You can add new tags/instances via the <code>AddToFilter</code> channel method. You can pass instances directly or a string that represents a Collection Service tag to add it to the channel's filter. </p> <pre><code>-- Peform changes \n\nChannel:AddToFilter(\"Tag1\")\nChannel:AddToFilter(\"Tag2\")\nChannel:AddToFilter(game.Workspace.Folder)\n\n-- Push changes without waiting on the module (If needed)\n\nChannel:ForceUpdateFilter()\n</code></pre>"},{"location":"HowToUse/#removing-from-a-channels-filter","title":"Removing from a Channel's filter","text":"<p>You can remove added tags/instances via the <code>RemoveFromFilter</code> channel method. You can pass instances directly or a string that represents a Collection Service tag to remove it from the channel's filter. </p> <pre><code>-- Peform changes \n\nChannel:RemoveFromFilter(\"Tag1\")\nChannel:RemoveFromFilter(\"Tag2\")\nChannel:RemoveFromFilter(game.Workspace.Folder)\n\n-- Push changes without waiting on the module (If needed)\n\nChannel:ForceUpdateFilter()\n</code></pre>"},{"location":"HowToUse/#destroying-a-channel","title":"Destroying a channel","text":"<p>After a channel is destroyed, it should no longer be used. </p> <pre><code>Channel:Destroy()\n</code></pre>"},{"location":"HowToUse/#casting-a-ray","title":"Casting a ray","text":"<p>This works almost identically to the standard workspace:Raycast API, but with a minor tweak. To cast a ray using the channel's filter, you need to call the [<code>Cast</code>] Channel method. The first two arguments, Origin and Direction, are the same as those in the Roblox API. The third optional argument specifies the <code>WorldRoot</code> where the ray should be cast. If nil, the <code>workspace</code> will be used.</p> <p>Info</p> <p>This method can be run in parallel.</p> <pre><code>local RaycastResult = Channel:Cast(Origin,Direction,game.Workspace) -- the third arg is optional\n</code></pre>"},{"location":"HowToUse/#accessing-channels","title":"Accessing channels","text":"<p>You can access a channel by getting it through the <code>:GetChannelObject</code> module function.</p> <p>Info</p> <p>This functionality can be limited when using actors</p> <pre><code>local Channel = SmartRaycastModule.GetChannel(\"ExampleChannelName\")\n\nif Channel ~= nil then\n   Channel:Cast(Origin,Direction)\nend\n</code></pre>"},{"location":"SmartRaycast/","title":"SmartRaycast","text":"<p>This section refers to the module itself.</p>"},{"location":"SmartRaycast/#properties","title":"Properties","text":""},{"location":"SmartRaycast/#gccycleinterval","title":"GCCycleInterval","text":"<p>SmartRaycast.GCCycleInterval: number </p> <p>How often the module cleans filter references to removed instances.</p>"},{"location":"SmartRaycast/#functions","title":"Functions","text":""},{"location":"SmartRaycast/#createchannel","title":"CreateChannel","text":"<p>SmartRaycast.CreateChannel(ChannelName: string, BaseArray: {Instance | string}?, CanBeAdded: ((Instance) \u2192 boolean | nil)?, FilterType: Enum.RaycastFilterType?, IgnoreWater: boolean?, CollisionGroup: string?, RespectCanCollide: boolean?, BruteForceAllSlow: boolean?): Channel</p> <p>Creates a new channel object.</p> <p>Info</p> <p>For more information, please refer to the 'How to Use' section in the Docs, specifically the 'Creating a Channel' part.</p>"},{"location":"SmartRaycast/#getchannel","title":"GetChannel","text":"<p>SmartRaycast.GetChannel(ChannelName: string): Channel?</p> <p>You can use this function to get a Channel Object by providing the name of the Channel, if the Channel does not exist then nil will be returned.</p> <p>Info</p> <p>This functionality can be limited when using actors</p>"}]}