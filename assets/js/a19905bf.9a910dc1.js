"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[847],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=a.createContext({}),l=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=l(e.components);return a.createElement(c.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},h=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=l(t),h=r,m=d["".concat(c,".").concat(h)]||d[h]||p[h]||o;return t?a.createElement(m,s(s({ref:n},u),{},{components:t})):a.createElement(m,s({ref:n},u))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,s=new Array(o);s[0]=h;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i[d]="string"==typeof e?e:r,s[1]=i;for(var l=2;l<o;l++)s[l]=t[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},87549:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var a=t(87462),r=(t(67294),t(3905));const o={sidebar_position:3},s="How to use",i={unversionedId:"HowToUse",id:"HowToUse",title:"How to use",description:"This page does not cover everything refer to the API for further information",source:"@site/docs/HowToUse.md",sourceDirName:".",slug:"/HowToUse",permalink:"/SmartRaycast/docs/HowToUse",draft:!1,editUrl:"https://github.com/Yiannis123Git/SmartRaycast/edit/master/docs/HowToUse.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"defaultSidebar",previous:{title:"Installation",permalink:"/SmartRaycast/docs/Install"}},c={},l=[{value:"Channel Creation",id:"channel-creation",level:2},{value:"1 - ChannelName",id:"1---channelname",level:3},{value:"2 - BaseArray",id:"2---basearray",level:3},{value:"3 - InstancesToCheck",id:"3---instancestocheck",level:3},{value:"4 - InstanceLogic",id:"4---instancelogic",level:3},{value:"EXAMPLE",id:"example",level:3},{value:"Casting a ray",id:"casting-a-ray",level:2}],u={toc:l},d="wrapper";function p(e){let{components:n,...t}=e;return(0,r.kt)(d,(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"how-to-use"},"How to use"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("em",{parentName:"p"},"This page does not cover everything refer to the API for further information"))),(0,r.kt)("h2",{id:"channel-creation"},"Channel Creation"),(0,r.kt)("p",null,"This function takes 4 special arguments the rest of the arguments are your typical ",(0,r.kt)("a",{parentName:"p",href:"https://create.roblox.com/docs/reference/engine/datatypes/RaycastParams#new"},"RayParams.new()")," arguments."),(0,r.kt)("h3",{id:"1---channelname"},"1 - ChannelName"),(0,r.kt)("p",null,"The name of the Channel that we will use to identify our channel after after creation."),(0,r.kt)("h3",{id:"2---basearray"},"2 - BaseArray"),(0,r.kt)("p",null,"An array of instances that will always be present in our FilterDescendantsInstances. You can add instances here that you know you will always Exclude/Include."),(0,r.kt)("h3",{id:"3---instancestocheck"},"3 - InstancesToCheck"),(0,r.kt)("p",null,"Instances that will have their Descendants checked in runtime using the 'InstanceLogic' function.  "),(0,r.kt)("h3",{id:"4---instancelogic"},"4 - InstanceLogic"),(0,r.kt)("p",null,"A function that should recieve an instance and return true if the instance should be added in the FilterDescendantsInstances Array. This function is run in protected call so you don't need to worry about any errors. "),(0,r.kt)("h3",{id:"example"},"EXAMPLE"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"local SmartRaycast = PathToModule\n\n--[\n    -- Lets imagine we have 2 folders in our worksapce with Parts in them called 'PartsToIgnore1' and 'PartsToIgnore2'\n    -- Lets also imagine we have a folder in our workspace called `DynamicFolder`\n--]\n\nlocal Channel = SmartRaycast.CreateChannel(\n    \"TestChannel\", -- Name of the Channel that we will use to Identify our channel\n    { game.Workspace.PartsToIgnore1, game.Workspace.PartsToIgnore2}, -- we add these objects to the BaseArray argument since they should always be ingnored\n    { game.Workspace.DynamicFolder}, -- We wanna check every Descedant of this folder to see if they should be Ignored or not, so we put the folder inside our InstancesToCheck Array\n    function(Inst: Instance) -- We specify our InstanceLogic function that will check the Descedants of the Dynamic Folder, if the function returns true the instance will be ignored\n        if Inst.Name == \"SpecialName\" then\n            return true\n        end\n    end,\n    Enum.RaycastFilterType.Exclude\n)\n\n\n")),(0,r.kt)("h2",{id:"casting-a-ray"},"Casting a ray"),(0,r.kt)("p",null,"This works almost identically to the normal ",(0,r.kt)("a",{parentName:"p",href:"https://create.roblox.com/docs/reference/engine/classes/WorldRoot#Raycast"},"workspace:Raycast")," but instead of RayParams we pass the Channel name.\nIf you want identical usage as the normal roblox method you can just call workspace:Raycast and pass the Channel's RayParams property."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'SmartRaycast.Cast(Origin,Direction,"TestChannel")\n\n-- Or we can do\n\nworkspace:Raycast(Origin,Direction,Channel.RayParams)\n\n')))}p.isMDXComponent=!0}}]);