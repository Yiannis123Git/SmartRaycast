"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[847],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=l(n),m=a,f=p["".concat(c,".").concat(m)]||p[m]||d[m]||o;return n?r.createElement(f,s(s({ref:t},u),{},{components:n})):r.createElement(f,s({ref:t},u))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[p]="string"==typeof e?e:a,s[1]=i;for(var l=2;l<o;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},87549:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var r=n(87462),a=(n(67294),n(3905));const o={sidebar_position:3},s="How to use",i={unversionedId:"HowToUse",id:"HowToUse",title:"How to use",description:"This page does not cover everything refer to API for further information",source:"@site/docs/HowToUse.md",sourceDirName:".",slug:"/HowToUse",permalink:"/SmartRaycast/docs/HowToUse",draft:!1,editUrl:"https://github.com/Yiannis123Git/SmartRaycast/edit/master/docs/HowToUse.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"defaultSidebar",previous:{title:"Installation",permalink:"/SmartRaycast/docs/Install"}},c={},l=[{value:"Channel Creation",id:"channel-creation",level:2},{value:"Casting a ray",id:"casting-a-ray",level:2}],u={toc:l},p="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"how-to-use"},"How to use"),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("em",{parentName:"p"},"This page does not cover everything refer to API for further information"))),(0,a.kt)("h2",{id:"channel-creation"},"Channel Creation"),(0,a.kt)("p",null,"This function takes 4 special arguments the rest of the arguments are your typical ",(0,a.kt)("a",{parentName:"p",href:"https://create.roblox.com/docs/reference/engine/datatypes/RaycastParams#new"},"RayParams.new()")," arguments."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"local SmartRaycast = PathToModule\n\n--[\n    -- Lets imagine we have 2 folders in our worksapce with Parts in them called 'PartsToIgnore1' and 'PartsToIgnore2'\n    -- Lets also imagine we have a folder in our workspace called `DynamicFolder`\n--]\n\nlocal Channel = SmartRaycast.CreateChannel(\n    \"TestChannel\", -- Name of the Channel that we will use to Identify our channel\n    { game.Workspace.PartsToIgnore1, game.Workspace.PartsToIgnore2}, -- we add these objects to the BaseArray argument since they should always be ingnored\n    { game.Workspace.DynamicFolder}, -- We wanna check every Descedant of this folder to see if they should be Ignored or not, so we put the folder inside our InstancesToCheck Array\n    function(Inst: Instance) -- We specify our InstanceLogic function that will check the Descedants of the Dynamic Folder, if the function returns true the instance will be ignored\n        if Inst.Name == \"SpecialName\" then\n            return true\n        end\n    end,\n    Enum.RaycastFilterType.Exclude\n)\n\n\n")),(0,a.kt)("h2",{id:"casting-a-ray"},"Casting a ray"),(0,a.kt)("p",null,"This works almost identically to the normal ",(0,a.kt)("a",{parentName:"p",href:"https://create.roblox.com/docs/reference/engine/classes/WorldRoot#Raycast"},"workspace:Raycast")," but instead of RayParams we pass the Channel name."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'SmartRaycast.Cast(Origin,Direction,"TestChannel")\n')))}d.isMDXComponent=!0}}]);