"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[847],{3905:(e,n,a)=>{a.d(n,{Zo:()=>h,kt:()=>p});var t=a(67294);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function o(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function s(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?o(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function c(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=t.createContext({}),i=function(e){var n=t.useContext(l),a=n;return e&&(a="function"==typeof e?e(n):s(s({},n),e)),a},h=function(e){var n=i(e.components);return t.createElement(l.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,h=c(e,["components","mdxType","originalType","parentName"]),u=i(a),m=r,p=u["".concat(l,".").concat(m)]||u[m]||d[m]||o;return a?t.createElement(p,s(s({ref:n},h),{},{components:a})):t.createElement(p,s({ref:n},h))}));function p(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=a.length,s=new Array(o);s[0]=m;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c[u]="string"==typeof e?e:r,s[1]=c;for(var i=2;i<o;i++)s[i]=a[i];return t.createElement.apply(null,s)}return t.createElement.apply(null,a)}m.displayName="MDXCreateElement"},87549:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>c,toc:()=>i});var t=a(87462),r=(a(67294),a(3905));const o={sidebar_position:3},s="How to use",c={unversionedId:"HowToUse",id:"HowToUse",title:"How to use",description:"This page does not cover everything refer to the API for further information",source:"@site/docs/HowToUse.md",sourceDirName:".",slug:"/HowToUse",permalink:"/SmartRaycast/docs/HowToUse",draft:!1,editUrl:"https://github.com/Yiannis123Git/SmartRaycast/edit/master/docs/HowToUse.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"defaultSidebar",previous:{title:"Installation",permalink:"/SmartRaycast/docs/Install"}},l={},i=[{value:"Creating a channel",id:"creating-a-channel",level:2},{value:"Arguments",id:"arguments",level:3},{value:"ChannelName",id:"channelname",level:4},{value:"BaseArray",id:"basearray",level:4},{value:"InstancesToCheck",id:"instancestocheck",level:4},{value:"InstanceLogic",id:"instancelogic",level:4},{value:"...",id:"",level:4},{value:"Example",id:"example",level:3},{value:"Destroying a channel",id:"destroying-a-channel",level:2}],h={toc:i},u="wrapper";function d(e){let{components:n,...a}=e;return(0,r.kt)(u,(0,t.Z)({},h,a,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"how-to-use"},"How to use"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("em",{parentName:"p"},"This page does not cover everything refer to the API for further information"))),(0,r.kt)("h1",{id:"what-is-a-channel"},"What is a channel?"),(0,r.kt)("p",null,"Imagine the channel object as your new RaycastParams. Each channel object corresponds to a RaycastParams instance. We can access these channels from any part of our codebase and use them to cast rays."),(0,r.kt)("h2",{id:"creating-a-channel"},"Creating a channel"),(0,r.kt)("p",null,"Creating a channel is very simple and works similarly to creating a normal RaycastParams instance, the difference being a couple of extra arguments that define how the module should manage the RaycastParams filter."),(0,r.kt)("h3",{id:"arguments"},"Arguments"),(0,r.kt)("h4",{id:"channelname"},"ChannelName"),(0,r.kt)("p",null,"The name of our channel should be unique and will be used to access the channel after creating it."),(0,r.kt)("h4",{id:"basearray"},"BaseArray"),(0,r.kt)("p",null,"Instances represented in this array will always be included in our filter. You should add instances that you know should always be part of the channel's filter. You can pass instances directly into the array or a string that represents a ",(0,r.kt)("a",{parentName:"p",href:"https://create.roblox.com/docs/reference/engine/classes/CollectionService"},"collection service")," tag. Passing a string that represents a ",(0,r.kt)("a",{parentName:"p",href:"https://create.roblox.com/docs/reference/engine/classes/CollectionService"},"collection service")," tag will add all current and future tagged instances to the channel's filter."),(0,r.kt)("h4",{id:"instancestocheck"},"InstancesToCheck"),(0,r.kt)("p",null,'This argument complements the "InstanceLogic" argument, detailed below. Similar to the BaseArray, you have the option to directly pass instances into the array or use a string that represents a ',(0,r.kt)("a",{parentName:"p",href:"https://create.roblox.com/docs/reference/engine/classes/CollectionService"},"collection service")," tag. When an instance is added to the array, both the instance and its descendants are continuously assessed by the InstanceLogic function to decide if they should be included in the channel's filter or removed. If a string representing a ",(0,r.kt)("a",{parentName:"p",href:"https://create.roblox.com/docs/reference/engine/classes/CollectionService"},"collection service")," tag is used, then only that specific instance is continuously evaluated by the InstanceLogic function to determine its eligibility for the channel's filter."),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"It's not recommended to directly pass instances with a high number of descendants into the InstancesToCheck array. Ideally, you should pass a collection service tag that has only the instances of interest tagged.")),(0,r.kt)("h4",{id:"instancelogic"},"InstanceLogic"),(0,r.kt)("p",null,'This argument complements the "InstancesToCheck" argument, detailed above. This should be a ',(0,r.kt)("strong",{parentName:"p"},"lightweight function")," that takes a single instance as its sole argument and returns true if that instance should be added to the filter. The function will be executed in a protected call by the module, so there's no need to handle missing properties or similar issues with additional logic within the function. For an example of an InstanceLogic function, see the example bellow."),(0,r.kt)("h4",{id:""},"..."),(0,r.kt)("p",null,'"The rest of the channel creation arguments are generic RaycastParams parameters that can be found in the corresponding ',(0,r.kt)("a",{parentName:"p",href:"https://create.roblox.com/docs/reference/engine/datatypes/RaycastParams"},"Roblox documentation"),"."),(0,r.kt)("h3",{id:"example"},"Example"),(0,r.kt)("p",null,"This is a simple, nonsensical example designed for easy understanding of the channel creation process."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'local SmartRaycastModule = PathToModule.SmartRaycast -- Our SmartRaycast module \n\nlocal OurChannelName = "ExampleChannelName" -- Our Channel\'s name\n\n-- We want to include characters in our channel\'s filter, so we specify game.Workspace.Characters.\n-- This is a folder that contains various characters.\n-- We also want to include instances tagged with the collection service tag \'CatsAndDogs\'.\n-- These instances will always be present in our channel\'s filter.\n\nlocal BaseArray = {game.Workspace.Characters, "CatsAndDogs"} \n\n-- We don\'t know what this house model contains, so we want to constantly monitor it.\n-- We also want to keep track of several individual objects tagged with "DynamicObjects" collection service tag.\n\nlocal InstancesToCheck = {game.workspace.House,"DynamicObjects"}\n\n-- We now must define our instance logic function, as we are working with an InstancesToCheck array. \n-- For more information, refer to the argument explanation above.\n\nlocal function InstanceLogic(Inst: Instance): boolean\n    if Inst.Size.X > 100 then -- this will not error if the instance does not have a size property due to pcall\n        return true -- Add this instance to the channel\'s filter\n    end\n\n    return false -- optional \nend\n\nlocal OurNewlyCreatedChannel = SmartRaycastModule.CreateChannel(\n    ChannelName,\n    BaseArray,\n    InstancesToCheck,\n    InstanceLogic,\n    Enum.RaycastFilterType.Exclude, \n    -- ...\n)\n')),(0,r.kt)("h2",{id:"destroying-a-channel"},"Destroying a channel"),(0,r.kt)("p",null,"After a channel is destroyed, it should no longer be used. You can destroy a channel in one of the following three ways."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'Channel:Destroy()\n\n-- or \n\nSmartRaycastModule.DestroyChannel(Channel)\n\n-- or \n\nSmartRaycastModule.DestroyChannel("ExampleChannelName")\n')),(0,r.kt)("h1",{id:"casting-a-ray"},"Casting a ray"),(0,r.kt)("p",null,"This works almost identically to the normal ",(0,r.kt)("a",{parentName:"p",href:"https://create.roblox.com/docs/reference/engine/classes/WorldRoot#Raycast"},"workspace:Raycast")," but instead of RayParams we pass the Channel name.\nIf you want identical usage as the normal roblox method you can just call workspace:Raycast and pass the Channel's RayParams property."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'local SmartRaycastModule = PathToModule.SmartRaycast -- Our SmartRaycast module \n\nSmartRaycastModule.Cast(Origin,Direction,"ExampleChannelName")\n\n-- Or we can do\n\nworkspace:Raycast(Origin,Direction,Channel.RayParams)\n')),(0,r.kt)("h1",{id:"accessing-channels"},"Accessing channels"),(0,r.kt)("p",null,"You can access a channel from anywhere by getting it through the ",(0,r.kt)("inlineCode",{parentName:"p"},':GetChannelObject("YourChannelsName")')," module function or by referencing its name during a module raycast call."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'local Channel = SmartRaycastModule.GetChannelObject("ExampleChannelName")\n\nif Channel ~= nil then\n   workspace:Raycast(Origin,Direction,Channel.RayParams)\nend\n')))}d.isMDXComponent=!0}}]);